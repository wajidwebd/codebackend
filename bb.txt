const express = require("express");
const mongoose = require("mongoose");
const multer = require("multer");
const cors = require("cors");
const session = require("express-session");
const bcrypt = require("bcryptjs");

const app = express();

// Middleware
app.use("/uploads", express.static("uploads"));
app.use(express.json());
app.use(cors({
  origin: "http://localhost:5173",
  credentials: true
}));
app.use(session({
  secret: "my_super_secret_123456789!@#",
  resave: false,
  saveUninitialized: false,
  cookie: {
    sameSite: "lax",
    secure: false
  }
}));

// MongoDB connection
mongoose.connect("mongodb://127.0.0.1:27017/codeview", {
  useNewUrlParser: true,
  useUnifiedTopology: true
}).then(() => console.log("MongoDB connected"));

// Schemas
const StudentSchema = new mongoose.Schema({
  name: String,
  email: { type: String, unique: true },
  password: String,
  batchname: String,
  branchname: String
});

const BranchSchema = new mongoose.Schema({
  branchname: { type: String, required: true },
  batchname: { type: String, required: true }
});

const LessonSchema = new mongoose.Schema({
  branchname: String,
  batchname: String,
  studentsname: [String], // Array of student names
  createddate: String,
  topicname: String,
  filenames: [String],
  classtype: String,
});

const Student = mongoose.model("Student", StudentSchema);
const Branch = mongoose.model("Branch", BranchSchema);
const Lesson = mongoose.model("Lesson", LessonSchema);

// Multer setup
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, "uploads/");
  },
  filename: function (req, file, cb) {
    cb(null, Date.now() + "-" + file.originalname);
  }
});
const upload = multer({ storage });

// Routes

// Create a branch and batch
app.post("/create-branch", async (req, res) => {
  const { branchname, batchname } = req.body;
  const newBranch = new Branch({ branchname, batchname });
  await newBranch.save();
  res.json({ success: true });
});

// Get batch list
app.get("/get-batches", async (req, res) => {
  const batches = await Branch.find();
  res.json(batches);
});

// Get students by branch and batch
app.get("/students-by-branch-batch", async (req, res) => {
  const { branchname, batchname } = req.query;

  if (!branchname || !batchname) {
    return res.status(400).json({ message: "Missing branchname or batchname" });
  }

  try {
    const students = await Student.find({ branchname, batchname }, "name");
    res.json(students);
  } catch (error) {
    res.status(500).json({ message: "Error fetching students" });
  }
});

// Student signup
app.post("/signup", async (req, res) => {
  const { name, email, password, batchname, branchname } = req.body;
  const existing = await Student.findOne({ email });
  if (existing) return res.status(400).json({ message: "Email already exists" });

  const hashed = await bcrypt.hash(password, 10);
  const student = new Student({ name, email, password: hashed, batchname, branchname });
  await student.save();

  res.json({ message: "Signup successful" });
});

// Student login
app.post("/login", async (req, res) => {
  const { email, password } = req.body;
  const student = await Student.findOne({ email });
  if (!student) return res.status(400).json({ message: "Invalid email or password" });

  const match = await bcrypt.compare(password, student.password);
  if (!match) return res.status(400).json({ message: "Invalid email or password" });

  req.session.studentId = student._id;
  req.session.batchname = student.batchname;
  req.session.branchname = student.branchname;
  req.session.email = student.email;

  res.json({
    message: "Login successful",
    email: student.email,
    batchname: student.batchname,
    branchname: student.branchname
  });
});

// Upload lesson
app.post("/upload-lesson", upload.array("filenames"), async (req, res) => {
  try {
    const {
      branchname,
      batchname,
      createddate,
      topicname,
      studentsname,
      classtype,
    } = req.body;

    console.log("req.body.studentsname",req.body.studentsname);
    
    // Parse studentsname correctly
    let studentsArray = [];
    if (req.body.studentsname) {
      if (Array.isArray(req.body.studentsname)) {
        studentsArray = req.body.studentsname;    
        console.log("1",studentsArray);


      } else {
        studentsArray = [req.body.studentsname];
                console.log("2",studentsArray);

      }
    }
        console.log("out",studentsArray);
    

    const filenames = req.files.map(file => file.filename);

    const newLesson = new Lesson({
      branchname,
      batchname,
      studentsname: studentsArray,
      createddate,
      topicname,
      filenames,
      classtype,
    });

    await newLesson.save();

    res.status(200).json({ message: "Lesson uploaded successfully" });
  } catch (error) {
    console.error("Upload lesson error:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});

// View lessons (admin view)
app.get("/lessons", async (req, res) => {
  const { branchname, batchname, page = 1, limit = 5 } = req.query;
  const query = {};
  if (branchname) query.branchname = branchname;
  if (batchname) query.batchname = batchname;

  const lessons = await Lesson.find(query)
    .sort({ createddate: -1 })
    .skip((page - 1) * limit)
    .limit(parseInt(limit));

  const total = await Lesson.countDocuments(query);

  res.json({
    lessons,
    total,
    page: parseInt(page),
    pages: Math.ceil(total / limit)
  });
});

// Student lesson view
app.get("/stulessons", async (req, res) => {
  const { batchname, branchname, email, page = 1, limit = 5 } = req.query;

  if (!batchname || !branchname || !email) {
    return res.status(400).json({ message: "Missing required fields" });
  }

  const student = await Student.findOne({ email });
  if (!student || student.batchname !== batchname || student.branchname !== branchname) {
    return res.status(401).json({ message: "Unauthorized" });
  }

  const query = { batchname, branchname };

  const lessons = await Lesson.find(query)
    .sort({ createddate: -1 })
    .skip((page - 1) * limit)
    .limit(parseInt(limit));

  const total = await Lesson.countDocuments(query);

  res.json({
    lessons,
    total,
    page: parseInt(page),
    pages: Math.ceil(total / limit),
  });
});

// Logout
app.post("/logout", (req, res) => {
  req.session.destroy();
  res.json({ message: "Logged out" });
});

// Start server
app.listen(10000, () => {
  console.log("Server started on port 10000");
});
